{"version":3,"sources":["../node_modules/tesseract.js/src/index.js","../node_modules/tesseract.js/src/browser/index.js","../node_modules/tesseract.js/package.json","../node_modules/tesseract.js/src/common/circularize.js","../node_modules/tesseract.js/src/common/job.js"],"names":[],"mappings":";;;;;AAAA,gBAAgB,mBAAO,CAAC,IAAiB;AACzC,oBAAoB,mBAAO,CAAC,IAAyB;AACrD,qBAAqB,mBAAO,CAAC,IAAc;AAC3C,qBAAqB,mBAAO,CAAC,EAAe;AAC5C,gBAAgB,mBAAO,CAAC,IAAiB;;AAEzC;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf,IAAI;AACJ;AACA,yC;AACA;;AAEA,2BAA2B,oEAAoE;AAC/F,GAAG;AACH;AACA;AACA;AACA;AACA,wBAAwB,oEAAoE;AAC5F,GAAG;AACH;;AAEA,a;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA,iC;;;;;;;AClFA;AACA;AACA;AACA;AACA;;AAEA,IAAI,KAAsC;AAC1C;AACA;AACA,CAAC;AACD,kBAAkB,mBAAO,CAAC,IAAoB;AAC9C;AACA;;AAEA;;;AAGA;AACA;AACA,gFAAgF;AAChF;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;;;;;;;ACjGA,kBAAkB,2HAA2H,+sBAA+sB,YAAY,+CAA+C,uDAAuD,wJAAwJ,iBAAiB,4KAA4K,eAAe,gEAAgE,SAAS,sDAAsD,qD;;;;;;;ACAj7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL;AACA,C;;;;;;;AC9DA,gBAAgB,mBAAO,CAAC,IAAkB;;AAE1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"static/js/27.9e4df775.chunk.js","sourcesContent":["const adapter = require('./node/index.js')\nconst circularize = require('./common/circularize.js')\nconst TesseractJob = require('./common/job');\nconst objectAssign = require('object-assign');\nconst version = require('../package.json').version;\n\nfunction create(workerOptions){\n\tworkerOptions = workerOptions || {};\n\tvar worker = new TesseractWorker(objectAssign({}, adapter.defaultOptions, workerOptions))\n\tworker.create = create;\n\tworker.version = version;\n\treturn worker;\n}\n\nclass TesseractWorker {\n\tconstructor(workerOptions){\n\t\tthis.worker = null;\n\t\tthis.workerOptions = workerOptions;\n\t\tthis._currentJob = null;\n\t\tthis._queue = []\n\t}\n\n\trecognize(image, options){\n\t\treturn this._delay(job => {\n\t\t\tif(typeof options === 'string'){\n\t\t\t\toptions = { lang: options };\n\t\t\t}else{\n\t\t\t\toptions = options || {}\n\t\t\t\toptions.lang = options.lang || 'eng';\t\n\t\t\t}\n\t\t\t\n\t\t\tjob._send('recognize', { image: image, options: options, workerOptions: this.workerOptions })\n\t\t})\n\t}\n\tdetect(image, options){\n\t\toptions = options || {}\n\t\treturn this._delay(job => {\n\t\t\tjob._send('detect', { image: image, options: options, workerOptions: this.workerOptions })\n\t\t})\n\t}\n\n\tterminate(){ \n\t\tif(this.worker) adapter.terminateWorker(this);\n\t\tthis.worker = null;\n\t}\n\n\t_delay(fn){\n\t\tif(!this.worker) this.worker = adapter.spawnWorker(this, this.workerOptions);\n\n\t\tvar job = new TesseractJob(this);\n\t\tthis._queue.push(e => {\n\t\t\tthis._queue.shift()\n\t\t\tthis._currentJob = job;\n\t\t\tfn(job)\n\t\t})\n\t\tif(!this._currentJob) this._dequeue();\n\t\treturn job\n\t}\n\n\t_dequeue(){\n\t\tthis._currentJob = null;\n\t\tif(this._queue.length > 0){\n\t\t\tthis._queue[0]()\n\t\t}\n\t}\n\n\t_recv(packet){\n\n        if(packet.status === 'resolve' && packet.action === 'recognize'){\n            packet.data = circularize(packet.data);\n        }\n\n\t\tif(this._currentJob.id === packet.jobId){\n\t\t\tthis._currentJob._handle(packet)\n\t\t}else{\n\t\t\tconsole.warn('Job ID ' + packet.jobId + ' not known.')\n\t\t}\n\t}\n}\n\nvar DefaultTesseract = create()\n\nmodule.exports = DefaultTesseract\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tesseract.js/src/index.js\n// module id = 1580\n// module chunks = 27","var defaultOptions = {\n    // workerPath: 'https://cdn.rawgit.com/naptha/tesseract.js/0.2.0/dist/worker.js',\n    corePath: 'https://cdn.rawgit.com/naptha/tesseract.js-core/0.1.0/index.js',    \n    langPath: 'https://cdn.rawgit.com/naptha/tessdata/gh-pages/3.02/',\n}\n\nif (process.env.NODE_ENV === \"development\") {\n    console.debug('Using Development Configuration')\n    defaultOptions.workerPath = location.protocol + '//' + location.host + '/dist/worker.dev.js?nocache=' + Math.random().toString(36).slice(3)\n}else{\n    var version = require('../../package.json').version;\n    defaultOptions.workerPath = 'https://cdn.rawgit.com/naptha/tesseract.js/' + version + '/dist/worker.js'\n}\n\nexports.defaultOptions = defaultOptions;\n\n\nexports.spawnWorker = function spawnWorker(instance, workerOptions){\n    if(window.Blob && window.URL){\n        var blob = new Blob(['importScripts(\"' + workerOptions.workerPath + '\");'])\n        var worker = new Worker(window.URL.createObjectURL(blob));\n    }else{\n        var worker = new Worker(workerOptions.workerPath)\n    }\n\n    worker.onmessage = function(e){\n        var packet = e.data;\n        instance._recv(packet)\n    }\n    return worker\n}\n\nexports.terminateWorker = function(instance){\n    instance.worker.terminate()\n}\n\nexports.sendPacket = function sendPacket(instance, packet){\n    loadImage(packet.payload.image, function(img){\n        packet.payload.image = img\n        instance.worker.postMessage(packet) \n    })\n}\n\n\nfunction loadImage(image, cb){\n    if(typeof image === 'string'){\n        if(/^\\#/.test(image)){\n            // element css selector\n            return loadImage(document.querySelector(image), cb)\n        }else if(/(blob|data)\\:/.test(image)){\n            // data url\n            var im = new Image\n            im.src = image;\n            im.onload = e => loadImage(im, cb);\n            return\n        }else{\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', image, true)\n            xhr.responseType = \"blob\";\n            xhr.onload = e => loadImage(xhr.response, cb);\n            xhr.onerror = function(e){\n                if(/^https?:\\/\\//.test(image) && !/^https:\\/\\/crossorigin.me/.test(image)){\n                    console.debug('Attempting to load image with CORS proxy')\n                    loadImage('https://crossorigin.me/' + image, cb)\n                }\n            }\n            xhr.send(null)\n            return\n        }\n    }else if(image instanceof File){\n        // files\n        var fr = new FileReader()\n        fr.onload = e => loadImage(fr.result, cb);\n        fr.readAsDataURL(image)\n        return\n    }else if(image instanceof Blob){\n        return loadImage(URL.createObjectURL(image), cb)\n    }else if(image.getContext){\n        // canvas element\n        return loadImage(image.getContext('2d'), cb)\n    }else if(image.tagName == \"IMG\" || image.tagName == \"VIDEO\"){\n        // image element or video element\n        var c = document.createElement('canvas');\n        c.width  = image.naturalWidth  || image.videoWidth;\n        c.height = image.naturalHeight || image.videoHeight;\n        var ctx = c.getContext('2d');\n        ctx.drawImage(image, 0, 0);\n        return loadImage(ctx, cb)\n    }else if(image.getImageData){\n        // canvas context\n        var data = image.getImageData(0, 0, image.canvas.width, image.canvas.height);\n        return loadImage(data, cb)\n    }else{\n        return cb(image)\n    }\n    throw new Error('Missing return in loadImage cascade')\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tesseract.js/src/browser/index.js\n// module id = 1581\n// module chunks = 27","module.exports = {\"name\":\"tesseract.js\",\"version\":\"1.0.10\",\"description\":\"Pure Javascript Multilingual OCR\",\"main\":\"src/index.js\",\"scripts\":{\"test\":\"echo \\\"Error: no test specified\\\" & exit 1\",\"start\":\"watchify src/index.js  -t [ envify --NODE_ENV development ] -t [ babelify --presets [ es2015 ] ] -o dist/tesseract.dev.js --standalone Tesseract & watchify src/browser/worker.js  -t [ envify --NODE_ENV development ] -t [ babelify --presets [ es2015 ] ] -o dist/worker.dev.js & http-server -p 7355\",\"build\":\"browserify src/index.js -t [ babelify --presets [ es2015 ] ] -o dist/tesseract.js --standalone Tesseract && browserify src/browser/worker.js -t [ babelify --presets [ es2015 ] ] -o dist/worker.js\",\"release\":\"npm run build && git commit -am 'new release' && git push && git tag `jq -r '.version' package.json` && git push origin --tags && npm publish\"},\"browser\":{\"./src/node/index.js\":\"./src/browser/index.js\"},\"author\":\"\",\"license\":\"Apache-2.0\",\"devDependencies\":{\"babel-preset-es2015\":\"^6.16.0\",\"babelify\":\"^7.3.0\",\"browserify\":\"^13.1.0\",\"envify\":\"^3.4.1\",\"http-server\":\"^0.9.0\",\"pako\":\"^1.0.3\",\"watchify\":\"^3.7.0\"},\"dependencies\":{\"file-type\":\"^3.8.0\",\"is-url\":\"^1.2.2\",\"jpeg-js\":\"^0.2.0\",\"level-js\":\"^2.2.4\",\"node-fetch\":\"^1.6.3\",\"object-assign\":\"^4.1.0\",\"png.js\":\"^0.2.1\",\"tesseract.js-core\":\"^1.0.2\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/naptha/tesseract.js.git\"},\"bugs\":{\"url\":\"https://github.com/naptha/tesseract.js/issues\"},\"homepage\":\"https://github.com/naptha/tesseract.js\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tesseract.js/package.json\n// module id = 1582\n// module chunks = 27","// The result of dump.js is a big JSON tree\n// which can be easily serialized (for instance\n// to be sent from a webworker to the main app\n// or through Node's IPC), but we want\n// a (circular) DOM-like interface for walking\n// through the data. \n\nmodule.exports = function circularize(page){\n    page.paragraphs = []\n    page.lines = []\n    page.words = []\n    page.symbols = []\n\n    page.blocks.forEach(function(block){\n        block.page = page;\n\n        block.lines = []\n        block.words = []\n        block.symbols = []\n\n        block.paragraphs.forEach(function(para){\n            para.block = block;\n            para.page = page;\n\n            para.words = []\n            para.symbols = []\n            \n            para.lines.forEach(function(line){\n                line.paragraph = para;\n                line.block = block;\n                line.page = page;\n\n                line.symbols = []\n\n                line.words.forEach(function(word){\n                    word.line = line;\n                    word.paragraph = para;\n                    word.block = block;\n                    word.page = page;\n                    word.symbols.forEach(function(sym){\n                        sym.word = word;\n                        sym.line = line;\n                        sym.paragraph = para;\n                        sym.block = block;\n                        sym.page = page;\n                        \n                        sym.line.symbols.push(sym)\n                        sym.paragraph.symbols.push(sym)\n                        sym.block.symbols.push(sym)\n                        sym.page.symbols.push(sym)\n                    })\n                    word.paragraph.words.push(word)\n                    word.block.words.push(word)\n                    word.page.words.push(word)\n                })\n                line.block.lines.push(line)\n                line.page.lines.push(line)\n            })\n            para.page.paragraphs.push(para)\n        })\n    })\n    return page\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tesseract.js/src/common/circularize.js\n// module id = 1597\n// module chunks = 27","const adapter = require('../node/index.js')\n\nlet jobCounter = 0;\n\nmodule.exports = class TesseractJob {\n    constructor(instance){\n        this.id = 'Job-' + (++jobCounter) + '-' + Math.random().toString(16).slice(3, 8)\n\n        this._instance = instance;\n        this._resolve = []\n        this._reject = []\n        this._progress = []\n        this._finally = []\n    }\n\n    then(resolve, reject){\n        if(this._resolve.push){\n            this._resolve.push(resolve) \n        }else{\n            resolve(this._resolve)\n        }\n\n        if(reject) this.catch(reject);\n        return this;\n    }\n    catch(reject){\n        if(this._reject.push){\n            this._reject.push(reject) \n        }else{\n            reject(this._reject)\n        }\n        return this;\n    }\n    progress(fn){\n        this._progress.push(fn)\n        return this;\n    }\n    finally(fn) {\n        this._finally.push(fn)\n        return this;  \n    }\n    _send(action, payload){\n        adapter.sendPacket(this._instance, {\n            jobId: this.id,\n            action: action,\n            payload: payload\n        })\n    }\n\n    _handle(packet){\n        var data = packet.data;\n        let runFinallyCbs = false;\n\n        if(packet.status === 'resolve'){\n            if(this._resolve.length === 0) console.log(data);\n            this._resolve.forEach(fn => {\n                var ret = fn(data);\n                if(ret && typeof ret.then == 'function'){\n                    console.warn('TesseractJob instances do not chain like ES6 Promises. To convert it into a real promise, use Promise.resolve.')\n                }\n            })\n            this._resolve = data;\n            this._instance._dequeue()\n            runFinallyCbs = true;\n        }else if(packet.status === 'reject'){\n            if(this._reject.length === 0) console.error(data);\n            this._reject.forEach(fn => fn(data))\n            this._reject = data;\n            this._instance._dequeue()\n            runFinallyCbs = true;\n        }else if(packet.status === 'progress'){\n            this._progress.forEach(fn => fn(data))\n        }else{\n            console.warn('Message type unknown', packet.status)\n        }\n\n        if (runFinallyCbs) {\n            this._finally.forEach(fn => fn(data));\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tesseract.js/src/common/job.js\n// module id = 1598\n// module chunks = 27"],"sourceRoot":""}